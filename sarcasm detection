{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Dense, Dropout, Embedding, Flatten\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom keras.layers.core import Dropout\n%matplotlib inline\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","execution_count":2,"outputs":[{"output_type":"stream","text":"/kaggle/input/news-headlines-dataset-for-sarcasm-detection/Sarcasm_Headlines_Dataset_v2.json\n/kaggle/input/news-headlines-dataset-for-sarcasm-detection/Sarcasm_Headlines_Dataset.json\n","name":"stdout"}]},{"metadata":{},"cell_type":"markdown","source":""},{"metadata":{"trusted":true},"cell_type":"code","source":"df=pd.read_json('/kaggle/input/news-headlines-dataset-for-sarcasm-detection/Sarcasm_Headlines_Dataset_v2.json',lines=True)\n\n\ndf.head()\ndf.tail()","execution_count":3,"outputs":[{"output_type":"execute_result","execution_count":3,"data":{"text/plain":"       is_sarcastic                                           headline  \\\n28614             1       jews to celebrate rosh hashasha or something   \n28615             1  internal affairs investigator disappointed con...   \n28616             0  the most beautiful acceptance speech this week...   \n28617             1  mars probe destroyed by orbiting spielberg-gat...   \n28618             1                 dad clarifies this not a food stop   \n\n                                            article_link  \n28614  https://www.theonion.com/jews-to-celebrate-ros...  \n28615  https://local.theonion.com/internal-affairs-in...  \n28616  https://www.huffingtonpost.com/entry/andrew-ah...  \n28617  https://www.theonion.com/mars-probe-destroyed-...  \n28618  https://www.theonion.com/dad-clarifies-this-no...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>is_sarcastic</th>\n      <th>headline</th>\n      <th>article_link</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>28614</th>\n      <td>1</td>\n      <td>jews to celebrate rosh hashasha or something</td>\n      <td>https://www.theonion.com/jews-to-celebrate-ros...</td>\n    </tr>\n    <tr>\n      <th>28615</th>\n      <td>1</td>\n      <td>internal affairs investigator disappointed con...</td>\n      <td>https://local.theonion.com/internal-affairs-in...</td>\n    </tr>\n    <tr>\n      <th>28616</th>\n      <td>0</td>\n      <td>the most beautiful acceptance speech this week...</td>\n      <td>https://www.huffingtonpost.com/entry/andrew-ah...</td>\n    </tr>\n    <tr>\n      <th>28617</th>\n      <td>1</td>\n      <td>mars probe destroyed by orbiting spielberg-gat...</td>\n      <td>https://www.theonion.com/mars-probe-destroyed-...</td>\n    </tr>\n    <tr>\n      <th>28618</th>\n      <td>1</td>\n      <td>dad clarifies this not a food stop</td>\n      <td>https://www.theonion.com/dad-clarifies-this-no...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"df.shape\ndf.info()\n#no null values","execution_count":4,"outputs":[{"output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 28619 entries, 0 to 28618\nData columns (total 3 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   is_sarcastic  28619 non-null  int64 \n 1   headline      28619 non-null  object\n 2   article_link  28619 non-null  object\ndtypes: int64(1), object(2)\nmemory usage: 670.9+ KB\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"X=df['headline'].values\ny=df['is_sarcastic'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n#split data 20% test and validation, 80% train","execution_count":5,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#setup tokenization and padding \nvocab_size = 10000\noov_tok = '<00V>'\nmax_length = 120\npadding_type = 'post'\ntrunc_type = 'post'\nembedding_dim = 16\nnum_epochs = 10","execution_count":6,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"tokenizer= Tokenizer(num_words=vocab_size, oov_token=oov_tok)\ntokenizer.fit_on_texts(X_train)\nword_index=tokenizer.word_index\ntraining_sequences=tokenizer.texts_to_sequences(X_train)\ntraining_padded=pad_sequences(training_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\ntesting_sequences=tokenizer.texts_to_sequences(X_test)\ntesting_padded=pad_sequences(testing_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)","execution_count":7,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam', metrics=['accuracy'])\nmodel.summary()","execution_count":8,"outputs":[{"output_type":"stream","text":"Model: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nembedding (Embedding)        (None, 120, 16)           160000    \n_________________________________________________________________\nglobal_average_pooling1d (Gl (None, 16)                0         \n_________________________________________________________________\ndense (Dense)                (None, 24)                408       \n_________________________________________________________________\ndense_1 (Dense)              (None, 1)                 25        \n=================================================================\nTotal params: 160,433\nTrainable params: 160,433\nNon-trainable params: 0\n_________________________________________________________________\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"history = model.fit(training_padded, \n                    y_train, \n                    validation_data=(testing_padded, y_test), \n                    epochs=30, \n                    verbose=2)\n","execution_count":9,"outputs":[{"output_type":"stream","text":"Epoch 1/30\n716/716 - 3s - loss: 0.6523 - accuracy: 0.6106 - val_loss: 0.5213 - val_accuracy: 0.8022\nEpoch 2/30\n716/716 - 2s - loss: 0.3990 - accuracy: 0.8441 - val_loss: 0.3839 - val_accuracy: 0.8255\nEpoch 3/30\n716/716 - 2s - loss: 0.3029 - accuracy: 0.8777 - val_loss: 0.3455 - val_accuracy: 0.8466\nEpoch 4/30\n716/716 - 2s - loss: 0.2560 - accuracy: 0.8998 - val_loss: 0.3370 - val_accuracy: 0.8512\nEpoch 5/30\n716/716 - 2s - loss: 0.2243 - accuracy: 0.9125 - val_loss: 0.3381 - val_accuracy: 0.8526\nEpoch 6/30\n716/716 - 2s - loss: 0.2000 - accuracy: 0.9231 - val_loss: 0.3598 - val_accuracy: 0.8459\nEpoch 7/30\n716/716 - 2s - loss: 0.1809 - accuracy: 0.9311 - val_loss: 0.3691 - val_accuracy: 0.8470\nEpoch 8/30\n716/716 - 2s - loss: 0.1658 - accuracy: 0.9382 - val_loss: 0.3731 - val_accuracy: 0.8473\nEpoch 9/30\n716/716 - 2s - loss: 0.1500 - accuracy: 0.9447 - val_loss: 0.3950 - val_accuracy: 0.8449\nEpoch 10/30\n716/716 - 2s - loss: 0.1381 - accuracy: 0.9499 - val_loss: 0.4062 - val_accuracy: 0.8466\nEpoch 11/30\n716/716 - 2s - loss: 0.1275 - accuracy: 0.9550 - val_loss: 0.4346 - val_accuracy: 0.8415\nEpoch 12/30\n716/716 - 2s - loss: 0.1174 - accuracy: 0.9594 - val_loss: 0.4535 - val_accuracy: 0.8407\nEpoch 13/30\n716/716 - 2s - loss: 0.1108 - accuracy: 0.9619 - val_loss: 0.4843 - val_accuracy: 0.8356\nEpoch 14/30\n716/716 - 2s - loss: 0.1041 - accuracy: 0.9643 - val_loss: 0.5047 - val_accuracy: 0.8377\nEpoch 15/30\n716/716 - 2s - loss: 0.0966 - accuracy: 0.9669 - val_loss: 0.5327 - val_accuracy: 0.8368\nEpoch 16/30\n716/716 - 2s - loss: 0.0903 - accuracy: 0.9695 - val_loss: 0.5569 - val_accuracy: 0.8367\nEpoch 17/30\n716/716 - 2s - loss: 0.0851 - accuracy: 0.9706 - val_loss: 0.6329 - val_accuracy: 0.8160\nEpoch 18/30\n716/716 - 2s - loss: 0.0803 - accuracy: 0.9728 - val_loss: 0.6256 - val_accuracy: 0.8298\nEpoch 19/30\n716/716 - 2s - loss: 0.0747 - accuracy: 0.9752 - val_loss: 0.6433 - val_accuracy: 0.8288\nEpoch 20/30\n716/716 - 2s - loss: 0.0698 - accuracy: 0.9773 - val_loss: 0.6903 - val_accuracy: 0.8276\nEpoch 21/30\n716/716 - 2s - loss: 0.0667 - accuracy: 0.9780 - val_loss: 0.7553 - val_accuracy: 0.8094\nEpoch 22/30\n716/716 - 2s - loss: 0.0616 - accuracy: 0.9797 - val_loss: 0.7609 - val_accuracy: 0.8244\nEpoch 23/30\n716/716 - 2s - loss: 0.0590 - accuracy: 0.9813 - val_loss: 0.7730 - val_accuracy: 0.8204\nEpoch 24/30\n716/716 - 2s - loss: 0.0546 - accuracy: 0.9831 - val_loss: 0.8153 - val_accuracy: 0.8227\nEpoch 25/30\n716/716 - 2s - loss: 0.0543 - accuracy: 0.9820 - val_loss: 0.9496 - val_accuracy: 0.8134\nEpoch 26/30\n716/716 - 2s - loss: 0.0503 - accuracy: 0.9847 - val_loss: 0.8754 - val_accuracy: 0.8132\nEpoch 27/30\n716/716 - 2s - loss: 0.0474 - accuracy: 0.9857 - val_loss: 0.9078 - val_accuracy: 0.8167\nEpoch 28/30\n716/716 - 2s - loss: 0.0436 - accuracy: 0.9869 - val_loss: 0.9452 - val_accuracy: 0.8183\nEpoch 29/30\n716/716 - 2s - loss: 0.0402 - accuracy: 0.9878 - val_loss: 1.0074 - val_accuracy: 0.8141\nEpoch 30/30\n716/716 - 2s - loss: 0.0407 - accuracy: 0.9879 - val_loss: 1.0076 - val_accuracy: 0.8066\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"def plot_acc(model,epochsnum):\n    df_m=pd.DataFrame(model.history.history)\n    df_m['Epoch']=range(1,epochsnum+1)\n    df_m.index=df_m['Epoch']\n    score = model.evaluate(testing_padded, y_test, batch_size=64, verbose=1)\n    print('Test accuracy:', score[1])\n    plt.plot(df_m['loss'])\n    plt.plot(df_m['val_loss'])\n    plt.title('model loss')\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train_loss', 'val_loss'])\n    plt.show()","execution_count":10,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"plot_acc(model=model,epochsnum=30)\n#overfitting graph","execution_count":11,"outputs":[{"output_type":"stream","text":"90/90 [==============================] - 0s 1ms/step - loss: 1.0076 - accuracy: 0.8066\nTest accuracy: 0.8066037893295288\n","name":"stdout"},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"model_eval = model.evaluate(testing_padded,y_test)\nprint('Validation_loss: '+str(model_eval[0]))\nprint('Accuracy: '+str(model_eval[1]))","execution_count":13,"outputs":[{"output_type":"stream","text":"179/179 [==============================] - 0s 1ms/step - loss: 1.0076 - accuracy: 0.8066\nValidation_loss: 1.0076017379760742\nAccuracy: 0.8066037893295288\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"cb = Callback(...)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.7.9","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":4}
